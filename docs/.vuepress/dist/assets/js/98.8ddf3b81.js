(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{1557:function(t,v,a){"use strict";a.r(v);var s=a(4),e=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"rpc-框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc-框架"}},[t._v("#")]),t._v(" RPC 框架")]),t._v(" "),v("p",[t._v("RPC（Remote Procedure Call，远程过程调用）是一种"),v("strong",[t._v("允许分布式系统中的不同服务像调用本地方法一样调用远程服务")]),t._v("的技术。RPC 框架封装了底层的网络通信、序列化和反序列化，使开发者可以透明地进行远程调用，而不需要手动处理复杂的网络编程")]),t._v(" "),v("h3",{attrs:{id:"why-rpc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#why-rpc"}},[t._v("#")]),t._v(" Why RPC?")]),t._v(" "),v("p",[t._v("在分布式系统中，不同的服务可能部署在不同的服务器上，它们需要相互通信。例如")]),t._v(" "),v("ul",[v("li",[t._v("电商系统：订单服务需要调用库存服务检查库存，再调用支付服务处理支付")]),t._v(" "),v("li",[t._v("微服务架构：多个微服务之间需要相互调用，比如用户认证服务、订单服务、商品服务等")])]),t._v(" "),v("p",[t._v("它对标的是 "),v("strong",[t._v("HTTP/REST")]),t._v(" 通信，我们当然可以直接通过打请求的方式获取数据，例如")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" restTemplate "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" restTemplate"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://server/user?id=1"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("p",[t._v("当然了，这是原始的实现方式，Spring Cloud 提供有优雅的上位代替 —— Feign，但他仍然是通过 HTTP 实现的服务通信")]),t._v(" "),v("p",[t._v("只要是基于 HTTP，就会存在")]),t._v(" "),v("ul",[v("li",[t._v("请求体较大（HTTP 请求头、JSON 序列化等）")]),t._v(" "),v("li",[t._v("性能损耗（HTTP 需要解析文本，序列化和反序列化的开销大）")]),t._v(" "),v("li",[t._v("协议不够高效（HTTP 是基于文本的，而 RPC 可以采用更高效的二进制协议）")])]),t._v(" "),v("p",[t._v("而 RPC 解决了这些问题")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("更高效")]),t._v("：使用"),v("strong",[t._v("二进制协议")]),t._v("（如 Protobuf），减少数据传输体积")]),t._v(" "),v("li",[v("strong",[t._v("更透明")]),t._v("：像调用本地方法一样调用远程服务")]),t._v(" "),v("li",[v("strong",[t._v("更易扩展")]),t._v("：内置"),v("strong",[t._v("负载均衡、服务注册与发现、流量控制")]),t._v("等功能")])]),t._v(" "),v("h3",{attrs:{id:"工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),v("p",[t._v("RPC 框架主要包含"),v("strong",[t._v("客户端、服务端、注册中心")]),t._v("三个核心组件")]),t._v(" "),v("ol",[v("li",[t._v("客户端（Client Stub）\n"),v("ul",[v("li",[t._v("发送请求给服务端，就像调用本地方法一样")]),t._v(" "),v("li",[t._v("负责序列化请求数据（将 Java 对象转换成字节流）")])])]),t._v(" "),v("li",[t._v("服务端（Server Stub）\n"),v("ul",[v("li",[t._v("监听客户端请求，调用对应的本地方法，并返回结果")]),t._v(" "),v("li",[t._v("负责反序列化请求数据（将字节流转换成 Java 对象）")])])]),t._v(" "),v("li",[t._v("注册中心（Service Registry）\n"),v("ul",[v("li",[t._v("维护所有可用的服务列表")]),t._v(" "),v("li",[t._v("客户端在调用时"),v("strong",[t._v("动态发现服务")]),t._v("，而不是写死 IP 地址")]),t._v(" "),v("li",[t._v("常用的注册中心：Zookeeper、Nacos")])])])]),t._v(" "),v("p",[t._v("RPC 典型流程")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("1️⃣ 客户端调用本地方法（伪装成普通的 Java 方法）\n2️⃣ RPC 框架将请求数据序列化并发送到服务端\n3️⃣ 服务端接收请求，反序列化数据，并调用目标方法\n4️⃣ 目标方法执行后返回结果\n5️⃣ 服务端将返回结果序列化并发送回客户端\n6️⃣ 客户端接收结果，返回给调用方\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br")])]),v("p",[t._v("常见 RPC 框架")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("RPC 框架")]),t._v(" "),v("th",[t._v("语言")]),t._v(" "),v("th",[t._v("主要特点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("gRPC")])]),t._v(" "),v("td",[t._v("多语言（Java、Go、Python等）")]),t._v(" "),v("td",[t._v("Google 开发，基于 HTTP/2 和 Protobuf，高性能，支持流式通信")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Dubbo")])]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("阿里巴巴开发，支持服务发现、负载均衡、流量控制")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Motan")])]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("美团开源，轻量级，适用于高并发场景")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Thrift")])]),t._v(" "),v("td",[t._v("多语言（Java、C++、Python等）")]),t._v(" "),v("td",[t._v("Facebook 开发，支持多种语言，适用于跨语言 RPC")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Tars")])]),t._v(" "),v("td",[t._v("多语言（Java、C++、Go等）")]),t._v(" "),v("td",[t._v("腾讯开源，支持大规模分布式应用")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("Hessian")])]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("简单易用，适用于小型应用，序列化采用二进制格式")])])])]),t._v(" "),v("h3",{attrs:{id:"dubbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[t._v("#")]),t._v(" Dubbo")]),t._v(" "),v("p",[t._v("Dubbo 是阿里巴巴开源的 Java RPC 框架，基于 Netty 实现，用于微服务间通信，不同 Feign 的 HTTP 通信，Dubbo 采用更加轻量迅捷的二进制协议进行数据传输，故而效率要远高于 Feign")]),t._v(" "),v("ul",[v("li",[t._v("和 Feign 一样，Dubbo 也是同步调用")])]),t._v(" "),v("p",[t._v("调用流程基本一致")]),t._v(" "),v("p",[v("strong",[t._v("代码示例")])]),t._v(" "),v("p",[t._v("1️⃣ 添加依赖")]),t._v(" "),v("div",{staticClass:"language-xml line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-xml"}},[v("code",[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.apache.dubbo"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("dubbo-spring-boot-starter"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.7.8"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br")])]),v("p",[t._v("2️⃣ 定义接口")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUser")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])]),v("p",[t._v("3️⃣ 实现服务端")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DubboService")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserServiceImpl")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUser")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("p",[t._v("4️⃣ 实现客户端")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DubboReference")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userService"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUser")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br")])]),v("p",[t._v("当然了，在客户端需要对注册中心（如 Nacos）在 application.yaml 进行配置，这样在碰到"),v("code",[t._v("@DubboReference")]),t._v("注解时，系统会自动去注册中心查询需要的服务地址")]),t._v(" "),v("div",{staticClass:"language-yaml line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-yaml"}},[v("code",[v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dubbo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" consumer"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 客户端应用名")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("registry")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("address")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nacos"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里配置的是注册中心的地址")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dubbo\n    "),v("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1 表示随机端口")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br")])]),v("p",[t._v("具体调用流程是")]),t._v(" "),v("ol",[v("li",[t._v("服务端（Provider）启动时，它会把自己的服务信息（接口、地址、端口等）注册到 Nacos/Zookeeper")]),t._v(" "),v("li",[t._v("客户端（Consumer）启动时，它会去"),v("strong",[t._v("注册中心查询")]),t._v("需要的服务地址")]),t._v(" "),v("li",[t._v("当代码运行到 "),v("code",[t._v("@DubboReference")]),t._v(" 时，Dubbo 代理会"),v("strong",[t._v("根据注册中心的信息找到远程服务")]),t._v("，然后建立连接并执行调用")])]),t._v(" "),v("p",[t._v("💡 "),v("strong",[t._v("当尝试修改服务端的 IP 地址时，客户端能够自动发现请求地址变化，这是注册中心完成的工作，对于 RPC 客户端是完全透明的")]),t._v(" 🚀")]),t._v(" "),v("p",[t._v("另外，Dubbo 内置了"),v("strong",[t._v("负载均衡、重试机制、超时控制")]),t._v("的功能，均可以在 application.yaml 中进行配置")]),t._v(" "),v("h3",{attrs:{id:"zookeeper"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[t._v("#")]),t._v(" Zookeeper")]),t._v(" "),v("p",[t._v("与 Nacos 同属于注册中心，Nacos 由阿里开发")]),t._v(" "),v("ul",[v("li",[t._v("Nacos 和 Zookeeper 的异同？")])]),t._v(" "),v("h2",{attrs:{id:"cap-原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cap-原则"}},[t._v("#")]),t._v(" CAP 原则")]),t._v(" "),v("p",[t._v("基于 CAP 原则：一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）三者不可兼得")]),t._v(" "),v("p",[t._v("什么是一致性、可用性和分区容忍性？")]),t._v(" "),v("ul",[v("li",[t._v("C - 一致性：所有节点在同一时间看到的数据相同")]),t._v(" "),v("li",[t._v("A - 可用性：每个请求都能得到响应（即使部分节点故障），但不保证是最新数据")]),t._v(" "),v("li",[t._v("P - 分区容忍性：指系统能够处理网络分区（节点间通信中断）的情况，即使部分节点无法通信，系统仍能正常运行")])]),t._v(" "),v("p",[t._v("CAP 理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类")]),t._v(" "),v("ul",[v("li",[t._v("CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大")]),t._v(" "),v("li",[t._v("CP：满足一致性，分区容忍性的系统，通常性能不是特别高")]),t._v(" "),v("li",[t._v("AP：满足可用性，分区容忍性的系统，通常可能对一致性要求低一些")])]),t._v(" "),v("p",[t._v("需要注意的是，在分布式环境中，网络分区是不可避免的，因此分布式系统都需要具有分区容忍性（P），故分布式系统的设计中，变成了 AP 和 CP 系统的选择")]),t._v(" "),v("p",[t._v("AP 系统和 CP 系统的例子")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("系统")]),t._v(" "),v("th",[t._v("一致性（C）")]),t._v(" "),v("th",[t._v("可用性（A）")]),t._v(" "),v("th",[t._v("分区容忍性（P）")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Eureka（AP）")]),t._v(" "),v("td",[t._v("Eureka 选择"),v("strong",[t._v("最终一致性")]),t._v("，当一个 Eureka Server 节点失联时，其他节点仍然可以提供服务，保证高可用性，即使短时间内数据可能不同步")]),t._v(" "),v("td",[t._v("Eureka 在网络分区时会优先保证可用性，即使某些实例信息不同步，也不会阻止服务发现。这使得 Eureka 能在部分失败的情况下继续运行，提供高可用性")]),t._v(" "),v("td",[t._v("Eureka 通过牺牲一致性来保证可用性（AP），即便部分节点无法通信，仍然可以继续提供服务")])]),t._v(" "),v("tr",[v("td",[t._v("Zookeeper（CP）")]),t._v(" "),v("td",[t._v("Zookeeper 采用 ZAB（Zookeeper Atomic Broadcast）协议，保证强一致性，确保集群中的所有节点数据保持同步。一旦有节点崩溃或网络分区发生，Zookeeper 会进入 Leader 选举过程，短时间内不可用，确保数据一致性")]),t._v(" "),v("td",[t._v("Zookeeper 在网络分区时更倾向于保持"),v("strong",[t._v("数据一致性")]),t._v("，可能会拒绝提供服务（即使有部分节点仍可用），导致部分时间不可用")]),t._v(" "),v("td",[t._v("Zookeeper 通过"),v("strong",[t._v("强一致性")]),t._v("机制，在发生分区时优先保证数据正确性（CP），但可能会牺牲部分可用性")])])])]),t._v(" "),v("h2",{attrs:{id:"注册中心的选择"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注册中心的选择"}},[t._v("#")]),t._v(" 注册中心的选择")]),t._v(" "),v("p",[t._v("注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系，一般包含如下功能")]),t._v(" "),v("ul",[v("li",[t._v("服务发现\n"),v("ol",[v("li",[t._v("服务注册/反注册：保存服务提供者和服务调用者的信息")]),t._v(" "),v("li",[t._v("服务订阅/取消订阅：服务调用者订阅服务提供者的信息，最好有实时推送的功能")]),t._v(" "),v("li",[t._v("服务路由（可选）：具有筛选整合服务提供者的能力")])])]),t._v(" "),v("li",[t._v("服务配置\n"),v("ol",[v("li",[t._v("配置订阅：服务提供者和服务调用者订阅微服务相关的配置")]),t._v(" "),v("li",[t._v("配置下发：主动将配置推送给服务提供者和服务调用者")])])]),t._v(" "),v("li",[t._v("服务健康检测：检测服务提供者的健康情况")])]),t._v(" "),v("p",[t._v("注册中心总览")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("组件名")]),t._v(" "),v("th",[t._v("语言")]),t._v(" "),v("th",[t._v("CAP")]),t._v(" "),v("th",[t._v("服务健康检查")]),t._v(" "),v("th",[t._v("对外暴露接口")]),t._v(" "),v("th",[t._v("Spring Cloud 集成")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Eureka")]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("AP")]),t._v(" "),v("td",[t._v("可配")]),t._v(" "),v("td",[t._v("HTTP")]),t._v(" "),v("td",[t._v("√")])]),t._v(" "),v("tr",[v("td",[t._v("Zookeeper")]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("CP")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("客户端")]),t._v(" "),v("td",[t._v("√")])]),t._v(" "),v("tr",[v("td",[t._v("Nacos")]),t._v(" "),v("td",[t._v("Java")]),t._v(" "),v("td",[t._v("AP / CP")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("RPC / DNS")]),t._v(" "),v("td",[t._v("√")])])])]),t._v(" "),v("p",[t._v("CA 是单点集群，满足一致性和可用性，不支持分区，仅能用于单机系统（本地玩具）")]),t._v(" "),v("p",[t._v("在分布式系统中，分区容忍性一定是要满足的，所以注册中心的选取实际上就是在一致性和可用性之间的选取，通常而言，要满足一致性就要牺牲一定的性能（即 CP 的性能会略逊于 AP），或者说，“弹性”")]),t._v(" "),v("ul",[v("li",[t._v("Eureka 是网飞（Netflex）开源的，某知名视频网站，这样的网站处理讲究一个实时性、讲究一个弹性，而不需要高度的一致性，比如我去请求一个视频，我管你新的旧的，先打回来再说，我都上膛了，不得不起飞，所以选择 AP 系统，放弃一定的一致性而换来高可用性，以保证用户不管什么时候都不会请求炸膛")]),t._v(" "),v("li",[t._v("但是在一些强调一致性的场景下，比如支付，一定是不能有吞订单、吞付款记录的情况出现，他的一致性一定是要优先保障的，一定是要选择所谓的 CP 系统，当订单出现异常时，一定是拒绝服务（可能是引入熔断机制），而不能随随便便进行后台数据的读写")])]),t._v(" "),v("h3",{attrs:{id:"eureka"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#eureka"}},[t._v("#")]),t._v(" Eureka")]),t._v(" "),v("p",[t._v("前面提到过，Eureka 是一个 AP 系统，是 Netflix 开源的"),v("strong",[t._v("服务发现组件")]),t._v("，它的设计目标是高可用性和弹性，因此在 CAP 中选择了 AP")]),t._v(" "),v("p",[t._v("Eureka 包含两个组件：Eureka Server 和 Eureka Client")]),t._v(" "),v("ul",[v("li",[t._v("Eureka Server 提供服务注册服务：各个微服务节点通过配置启动后，会在 EurekaServer 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到")]),t._v(" "),v("li",[t._v("Eureka Client 通过注册中心进行访问：本质上是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳（默认周期为30秒）。"),v("strong",[t._v("如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer 将会从服务注册表中把这个服务节点移除（默认90秒）")])])]),t._v(" "),v("p",[t._v("Eureka 有一个重要的特性叫"),v("strong",[t._v("自我保护机制")]),t._v("（Self-Preservation），这是它作为 AP 系统的核心设计之一")]),t._v(" "),v("ul",[v("li",[t._v("触发条件：当 Eureka 服务器节点在短时间内丢失过多客户端心跳（例如网络分区或大规模服务故障），Eureka 会进入自我保护模式")]),t._v(" "),v("li",[t._v("行为：在自我保护模式下，Eureka 不会立即注销丢失心跳的服务实例，"),v("strong",[t._v("而是保留这些实例，即使它们可能已经不可用")])]),t._v(" "),v("li",[t._v("目的：这是为了防止因网络分区或临时故障导致的服务实例被错误地注销，从而避免大规模服务不可用")]),t._v(" "),v("li",[t._v("影响：在自我保护模式下，Eureka 的数据可能不一致（例如保留了已宕机的服务实例），但保证了系统的可用性")])]),t._v(" "),v("h3",{attrs:{id:"zookeeper-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-2"}},[t._v("#")]),t._v(" Zookeeper")]),t._v(" "),v("blockquote",[v("p",[t._v("Zookeeper 遵循 CP 原则，保证一致性和分区容错性")])]),t._v(" "),v("p",[t._v("ZooKeeper 是一个树形目录服务，其数据模型和 Unix 的文件系统目录树很类似，拥有一个层次化结构，数据以节点的形式存放在树中")]),t._v(" "),v("p",[t._v("Zookeeper 服务端常用命令")]),t._v(" "),v("ul",[v("li",[t._v("启动 ZooKeeper 服务: ./zkServer.sh start")]),t._v(" "),v("li",[t._v("查看 ZooKeeper 服务状态: ./zkServer.sh status")]),t._v(" "),v("li",[t._v("停止 ZooKeeper 服务: ./zkServer.sh stop")]),t._v(" "),v("li",[t._v("重启 ZooKeeper 服务: ./zkServer.sh restart")])]),t._v(" "),v("p",[t._v("Curator API：建立连接；添加节点；删除节点；修改节点；查询节点")]),t._v(" "),v("p",[t._v("Zookeeper 分布式锁，和 Redis 的分布式锁（Redission）类似，通过拿取/删除临时节点（Redis 是键值对）来实现锁，Curator 提供了基于五种基于 Zookeeper 的分布式锁方案")]),t._v(" "),v("ul",[v("li",[t._v("InterProcessSemaphoreMutex：分布式排它锁（非可重入锁）")]),t._v(" "),v("li",[t._v("InterProcessMutex：分布式可重入排它锁")]),t._v(" "),v("li",[t._v("InterProcessReadWriteLock：分布式读写锁")]),t._v(" "),v("li",[t._v("InterProcessMultiLock：将多个锁作为单个实体管理的容器")]),t._v(" "),v("li",[t._v("InterProcessSemaphoreV2：共享信号量")])]),t._v(" "),v("p",[t._v("Watch 事件监听：ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性")]),t._v(" "),v("p",[t._v("ZooKeeper 提供了三种 Watcher")]),t._v(" "),v("ol",[v("li",[t._v("NodeCache：只是监听某一个特定的节点")]),t._v(" "),v("li",[t._v("PathChildrenCache：监控一个 ZNode 的子节点")]),t._v(" "),v("li",[t._v("TreeCache：可以监控整个树上的所有节点，类似于 PathChildrenCache 和 NodeCache 的组合")])]),t._v(" "),v("p",[t._v("在 ZooKeeper "),v("strong",[t._v("集群")]),t._v("服务中有三个角色，这是一个经典的"),v("strong",[t._v("主从架构")])]),t._v(" "),v("ul",[v("li",[t._v("Leader 领导者：Leader 是集群的核心，负责处理所有写请求（如创建、更新、删除节点）和事务性操作，Leader 负责将写操作同步到所有 Follower 和 Observer 节点，确保数据一致性")]),t._v(" "),v("li",[t._v("Follower 跟随者：处理客户端的读请求，参与写请求的投票（ZooKeeper 使用 Zab 协议，写请求需要大多数节点确认），参与 Leader 选举")]),t._v(" "),v("li",[t._v("Observer 观察者：处理客户端的读请求，不参与写请求的投票，也不参与 Leader 选举。Observer 的"),v("strong",[t._v("主要作用是扩展 ZooKeeper 集群的读能力")]),t._v("，而不会增加写操作的开销")])]),t._v(" "),v("p",[t._v("就是说，Leader 负责写，Follower 和 Observer 负责读，并且通过同步复制（区别于 Eureka 的异步复制）从 Leader 节点中同步数据，以保证系统的一致性")]),t._v(" "),v("ul",[v("li",[t._v("Leader 相当于经典的主从架构中的 Master，而 Follower 相当于 Slave")])]),t._v(" "),v("p",[t._v("Zookeeper 集群的读写流程")]),t._v(" "),v("ol",[v("li",[t._v("写请求流程：\n"),v("ul",[v("li",[t._v("客户端发送写请求到任意节点（Leader 或 Follower）")]),t._v(" "),v("li",[t._v("如果请求发送到 Follower，Follower 会将请求转发给 Leader")]),t._v(" "),v("li",[t._v("Leader 将写请求作为提案（Proposal）广播给所有 Follower")]),t._v(" "),v("li",[t._v("Follower 收到提案后，会进行投票（ACK）")]),t._v(" "),v("li",[t._v("当大多数节点（包括 Leader 自己）确认后，Leader 会提交（Commit）该写操作，并通知所有 Follower 和 Observer 同步数据")])])]),t._v(" "),v("li",[t._v("读请求流程：\n"),v("ul",[v("li",[t._v("客户端发送读请求到任意节点（Leader、Follower 或 Observer）")]),t._v(" "),v("li",[t._v("节点直接返回本地数据，不需要与其他节点协商")])])])]),t._v(" "),v("p",[t._v("Leader 的选举：Zookeeper 集群的 Leader 是动态选举的，而不是静态指派")]),t._v(" "),v("ul",[v("li",[t._v("Serverid：服务器 ID，比如有三台服务器，编号分别为"),v("code",[t._v("1,2,3")]),t._v("，编号越大在选择算法中的权重越大")]),t._v(" "),v("li",[t._v("Zxid：数据 ID，服务器中存放的最大数据 ID 值越大说明数据越新，在选举算法中数据越新权重越大")])]),t._v(" "),v("p",[t._v("在 Leader 选举的过程中，如果某台 ZooKeeper 获得了超过半数的选票，则此 ZooKeeper 就可以成为 Leader 了")]),t._v(" "),v("p",[t._v("⁉ 我突然想到了 Nginx 的主进程和工作进程（因为看到了 Master 和 Slave），这是否也是一种主从架构？似乎不是，Nginx 就是一个主进程作为管理者，工作进程之间相互平等，无主从关系，实际做事的都是工作进程。就像 FTP 协议，21 端口控制，20 端口传输，你不能说这是一个主从吧")]),t._v(" "),v("ul",[v("li",[t._v("实际上，Nginx 是一个"),v("strong",[t._v("单主多进程")]),t._v("的架构，并不涉及数据一致性和分布式协调问题，而是专注于高效处理网络请求")])]),t._v(" "),v("p",[t._v("在 Zookeeper 集群中")]),t._v(" "),v("h3",{attrs:{id:"nacos"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nacos"}},[t._v("#")]),t._v(" Nacos")]),t._v(" "),v("blockquote",[v("p",[t._v("Nacos 支持两种模式："),v("strong",[t._v("AP 模式")]),t._v("（基于 Distro 协议）和 "),v("strong",[t._v("CP 模式")]),t._v("（基于 Raft 协议）")])]),t._v(" "),v("p",[t._v("Nacos 是阿里巴巴开源的一款 Java 实现的动态服务发现、配置管理和服务管理平台，是 Spring Cloud Alibaba 生态的核心组件之一，支持多种服务注册与发现模式")]),t._v(" "),v("p",[t._v("核心特性")]),t._v(" "),v("ul",[v("li",[t._v("服务发现：支持基于 DNS 和 RPC 的服务发现，提供服务的注册、注销和查询功能")]),t._v(" "),v("li",[t._v("动态 DNS：支持将服务名解析为具体的 IP 地址和端口")]),t._v(" "),v("li",[v("strong",[t._v("一致性协议")]),t._v(" "),v("ul",[v("li",[t._v("Nacos 支持两种模式："),v("strong",[t._v("AP 模式")]),t._v("（基于 Distro 协议）和 "),v("strong",[t._v("CP 模式")]),t._v("（基于 Raft 协议）")]),t._v(" "),v("li",[t._v("默认情况下，Nacos 使用 AP 模式，适合需要高可用性的场景，CP 模式适合需要强一致性的场景")])])]),t._v(" "),v("li",[t._v("健康检查：支持多种健康检查机制，包括心跳检测和主动探测")])]),t._v(" "),v("p",[t._v("模式的切换是 Nacos 的核心卖点，适合需要灵活选择 AP 或 CP 模式的场景")]),t._v(" "),v("h2",{attrs:{id:"远程调用的选择"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#远程调用的选择"}},[t._v("#")]),t._v(" 远程调用的选择")]),t._v(" "),v("p",[t._v("远程调用框架总览")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("特性")]),t._v(" "),v("th",[t._v("RestTemplate")]),t._v(" "),v("th",[v("strong",[t._v("WebClient")])]),t._v(" "),v("th",[t._v("Feign")]),t._v(" "),v("th",[t._v("OpenFeign")]),t._v(" "),v("th",[t._v("Dubbo")]),t._v(" "),v("th",[t._v("gRPC")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("调用方式")])]),t._v(" "),v("td",[t._v("同步 HTTP 调用")]),t._v(" "),v("td",[t._v("异步/响应式 HTTP 调用")]),t._v(" "),v("td",[t._v("声明式 HTTP 调用")]),t._v(" "),v("td",[t._v("声明式 HTTP 调用")]),t._v(" "),v("td",[t._v("高性能 RPC 调用，Dubbo 协议")]),t._v(" "),v("td",[t._v("高性能 RPC 调用，基于 HTTP/2")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("负载均衡")])]),t._v(" "),v("td",[t._v("不支持")]),t._v(" "),v("td",[t._v("支持（集成 LoadBalancer）")]),t._v(" "),v("td",[t._v("支持（集成 Ribbon）")]),t._v(" "),v("td",[t._v("支持（集成 Ribbon）")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("支持（结合注册中心）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("服务发现")])]),t._v(" "),v("td",[t._v("不支持")]),t._v(" "),v("td",[t._v("支持（结合 Spring Cloud）")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("支持")]),t._v(" "),v("td",[t._v("支持（结合注册中心）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("性能")])]),t._v(" "),v("td",[t._v("较低")]),t._v(" "),v("td",[t._v("中等偏高")]),t._v(" "),v("td",[t._v("中等")]),t._v(" "),v("td",[t._v("中等")]),t._v(" "),v("td",[t._v("极高")]),t._v(" "),v("td",[t._v("高（HTTP/2 + ProtoBuf）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("适用场景")])]),t._v(" "),v("td",[t._v("简单 HTTP 请求")]),t._v(" "),v("td",[t._v("高并发响应式调用")]),t._v(" "),v("td",[t._v("声明式 HTTP 调用")]),t._v(" "),v("td",[t._v("Spring Cloud 生态")]),t._v(" "),v("td",[t._v("高性能分布式服务调用")]),t._v(" "),v("td",[t._v("高性能跨语言服务通信")])])])]),t._v(" "),v("p",[t._v("服务调用的选择")]),t._v(" "),v("ul",[v("li",[t._v("如果需要简单的 HTTP 请求，选择 "),v("strong",[t._v("WebClient")])]),t._v(" "),v("li",[t._v("如果需要客户端负载均衡和声明式 HTTP 调用，选择 "),v("strong",[t._v("Feign")]),t._v(" 或 "),v("strong",[t._v("OpenFeign")])]),t._v(" "),v("li",[t._v("如果需要高性能的 RPC 调用和强大的服务治理能力，选择 "),v("strong",[t._v("Dubbo")])])]),t._v(" "),v("h3",{attrs:{id:"resttemplate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#resttemplate"}},[t._v("#")]),t._v(" RestTemplate")]),t._v(" "),v("p",[v("code",[t._v("RestTemplate")]),t._v(" 是 Spring 提供的一个用于同步 HTTP 请求的客户端工具，"),v("strong",[t._v("它封装了 HTTP 请求的细节")]),t._v("，例如请求方式（Get / Post）、请求格式（Json）等，支持 RESTful 风格的调用")]),t._v(" "),v("ul",[v("li",[t._v("已被 Spring 标记为“"),v("strong",[t._v("不再推荐")]),t._v("”，官方建议使用 "),v("code",[t._v("WebClient")]),t._v("（响应式非阻塞）作为替代")])]),t._v(" "),v("p",[t._v("核心特性")]),t._v(" "),v("ol",[v("li",[t._v("同步调用："),v("code",[t._v("RestTemplate")]),t._v(" 是同步阻塞的，适合简单的 HTTP 请求场景")]),t._v(" "),v("li",[t._v("支持多种 HTTP 方法：如 GET、POST、PUT、DELETE 等")]),t._v(" "),v("li",[t._v("集成 Spring 生态：与 Spring 框架无缝集成，支持消息转换（如 JSON、XML）")]),t._v(" "),v("li",[t._v("简单易用：适合快速开发和小规模项目")])]),t._v(" "),v("p",[t._v("就像傻软奥联给的密码机接口，就是封装的 RestTemplate 打")]),t._v(" "),v("p",[t._v("Ribbon：Netflix 开源的客户端负载均衡器，通常与"),v("code",[t._v("RestTemplate")]),t._v("或"),v("code",[t._v("Feign")]),t._v("结合使用，用于在微服务架构中实现服务调用的负载均衡")]),t._v(" "),v("ul",[v("li",[t._v("什么是负载均衡？让我们回顾一下 Nginx 的负载均衡，简单的处理就是在多个后端服务中进行轮询请求，请求"),v("code",[t._v("1, 2, 3, 4")]),t._v("分别请求服务"),v("code",[t._v("A.1, A.2, A.1, A.2")]),t._v("，其中"),v("code",[t._v("A.1, A.2")]),t._v("就是两个相同功能的微服务接口")])]),t._v(" "),v("p",[t._v("核心特性")]),t._v(" "),v("ol",[v("li",[t._v("客户端负载均衡："),v("code",[t._v("Ribbon")]),t._v(" 在客户端实现负载均衡，支持多种负载均衡策略（如轮询、随机、加权等）")]),t._v(" "),v("li",[t._v("服务发现集成：与 Eureka、Consul 等服务注册中心集成，动态获取服务实例列表")]),t._v(" "),v("li",[t._v("故障容错：支持超时、重试等机制，提高系统的容错能力")])]),t._v(" "),v("h3",{attrs:{id:"feign-openfeign"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#feign-openfeign"}},[t._v("#")]),t._v(" Feign / OpenFeign")]),t._v(" "),v("p",[v("code",[t._v("Feign")]),t._v("是 Netflix 开源的一个声明式的 HTTP 客户端，旨在简化服务调用。它通过注解的方式定义接口，自动生成 HTTP 请求")]),t._v(" "),v("ul",[v("li",[t._v("值得注意的是，Feign 内置了 Ribbon，自带负载均衡配置项")])]),t._v(" "),v("p",[t._v("核心特性")]),t._v(" "),v("ol",[v("li",[t._v("声明式调用：通过注解定义接口，无需编写具体的 HTTP 请求代码")]),t._v(" "),v("li",[t._v("集成 Ribbon：默认集成了 Ribbon，支持客户端负载均衡")]),t._v(" "),v("li",[t._v("支持多种编码器/解码器：如 JSON、XML 等")])]),t._v(" "),v("p",[t._v("我理解为 HTTP 请求的一层封装，通过注解定义接口，而无需编写复杂的 HTTP 请求代码，但本质上是一样的，都是 HTTP 的同步阻塞调用")]),t._v(" "),v("p",[v("code",[t._v("OpenFeign")]),t._v("是"),v("code",[t._v("Feign")]),t._v("的社区维护版本，Spring Cloud 对其进行了增强和集成。它继承了"),v("code",[t._v("Feign")]),t._v("的所有特性，并增加了对 Spring 生态的支持（可以理解为更适合 Spring 宝宝体质的 Feign）")]),t._v(" "),v("img",{attrs:{src:a(876)}}),t._v(" "),v("p",[t._v("核心特性")]),t._v(" "),v("ol",[v("li",[t._v("声明式调用：与 "),v("code",[t._v("Feign")]),t._v(" 相同，通过注解定义接口")]),t._v(" "),v("li",[t._v("集成 Spring Cloud：支持 Spring Cloud 的"),v("strong",[t._v("服务发现、负载均衡、熔断器、超时控制")]),t._v("等特性")]),t._v(" "),v("li",[t._v("扩展性强：支持自定义编码器、解码器、拦截器等")])]),t._v(" "),v("p",[t._v("与 Feign 的区别就是，集成在 Spring Cloud 生态中，与微服务调用相结合，并支持更多的功能和扩展性")]),t._v(" "),v("h3",{attrs:{id:"dubbo-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-2"}},[t._v("#")]),t._v(" Dubbo")]),t._v(" "),v("p",[v("code",[t._v("Dubbo")]),t._v("是阿里巴巴开源的一款高性能 Java RPC 框架，主要用于分布式服务之间的远程调用，这里也说了，Dubbo 是一个 RPC 框架，他并不是打的 HTTP 请求，而是某种二进制协议")]),t._v(" "),v("ul",[v("li",[t._v("就叫 Dubbo 协议，是基于 TCP 的高效通信协议，省去了很多 HTTP 中冗余的部分")])]),t._v(" "),v("p",[t._v("核心特性 → 适用于高性能的分布式服务调用和需要强大服务治理能力的场景")]),t._v(" "),v("ol",[v("li",[t._v("高性能 RPC：基于 Netty 实现，性能优异")]),t._v(" "),v("li",[t._v("服务治理：支持负载均衡、服务降级、熔断、限流等功能")]),t._v(" "),v("li",[t._v("服务发现：支持多种注册中心（如 Zookeeper、Nacos）")]),t._v(" "),v("li",[t._v("多协议支持：支持 Dubbo 协议、HTTP、REST 等")]),t._v(" "),v("li",[t._v("分布式事务：支持分布式事务解决方案（如 Seata）")])]),t._v(" "),v("p",[t._v("注册中心挂了之后，Dubbo 还能访问到服务吗？")]),t._v(" "),v("p",[t._v("分情况，如果之前调用过，Dubbo 会把服务地址缓存在本地，再次调用时不会访问注册中心，这里存在一致性的问题？")]),t._v(" "),v("h3",{attrs:{id:"grpc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[t._v("#")]),t._v(" gRPC")]),t._v(" "),v("p",[t._v("gRPC 是 Google 开源的一个高性能、通用的远程过程调用（RPC）框架，用于在分布式系统中实现跨服务、跨语言的高效通信")]),t._v(" "),v("p",[t._v("核心特点")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("特性")]),t._v(" "),v("th",[t._v("简要说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("基于 HTTP/2")]),t._v(" "),v("td",[t._v("支持多路复用、头部压缩、流式传输，提升网络效率和性能")])]),t._v(" "),v("tr",[v("td",[t._v("使用 Protobuf")]),t._v(" "),v("td",[t._v("使用 Protocol Buffers（协议缓冲）进行序列化，比 JSON 更小更快更高效")])]),t._v(" "),v("tr",[v("td",[t._v("多语言支持")]),t._v(" "),v("td",[t._v("支持 Java、Go、Python、C++、C#、Node.js 等主流语言，适合构建"),v("strong",[t._v("多语言微服务架构")])])]),t._v(" "),v("tr",[v("td",[t._v("自动代码生成")]),t._v(" "),v("td",[t._v("使用 "),v("code",[t._v(".proto")]),t._v(" 文件定义接口和数据结构，gRPC 工具自动生成客户端和服务端代码。")])]),t._v(" "),v("tr",[v("td",[t._v("支持四种通信模式")]),t._v(" "),v("td",[t._v("包括：一元调用（普通 RPC）、服务端流、客户端流、双向流通信")])])])]),t._v(" "),v("p",[t._v("响应流程")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("客户端调用方法 → gRPC 框架序列化请求 → 通过 HTTP/2 发送 → 服务端反序列化处理 → 返回响应\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("与 HTTP 方式的对比")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("对比点")]),t._v(" "),v("th",[t._v("gRPC")]),t._v(" "),v("th",[t._v("REST（如 Feign）")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("协议")]),t._v(" "),v("td",[t._v("HTTP/2 + Protobuf")]),t._v(" "),v("td",[t._v("HTTP/1.1 + JSON")])]),t._v(" "),v("tr",[v("td",[t._v("性能")]),t._v(" "),v("td",[t._v("高")]),t._v(" "),v("td",[t._v("中")])]),t._v(" "),v("tr",[v("td",[t._v("类型支持")]),t._v(" "),v("td",[t._v("强类型（proto约束）")]),t._v(" "),v("td",[t._v("弱类型（JSON）")])]),t._v(" "),v("tr",[v("td",[t._v("开发效率")]),t._v(" "),v("td",[t._v("高（代码自动生成）")]),t._v(" "),v("td",[t._v("中（需手写接口类）")])]),t._v(" "),v("tr",[v("td",[t._v("跨语言支持")]),t._v(" "),v("td",[t._v("很强")]),t._v(" "),v("td",[t._v("一般")])])])]),t._v(" "),v("p",[t._v("✅ 使用场景")]),t._v(" "),v("ul",[v("li",[t._v("微服务架构下的高性能服务间通信")]),t._v(" "),v("li",[t._v("跨语言通信")]),t._v(" "),v("li",[t._v("移动端与后端通信（如 Android/Go）")]),t._v(" "),v("li",[t._v("IoT、大数据服务对接等对延迟、带宽要求高的系统")])])])}),[],!1,null,null,null);v.default=e.exports},876:function(t,v,a){t.exports=a.p+"assets/img/image-20250319214847181.608e5aa9.png"}}]);