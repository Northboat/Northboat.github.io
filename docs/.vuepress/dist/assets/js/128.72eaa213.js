(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{1552:function(s,t,a){"use strict";a.r(t);var e=a(5),v=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"镜像构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建"}},[s._v("#")]),s._v(" 镜像构建")]),s._v(" "),t("h3",{attrs:{id:"dockerfile-多阶段构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-多阶段构建"}},[s._v("#")]),s._v(" Dockerfile 多阶段构建")]),s._v(" "),t("p",[s._v("别忘记我们的核心诉求（或者说，容器的功能）")]),s._v(" "),t("ul",[t("li",[s._v("为应用程序提供运行环境")]),s._v(" "),t("li",[s._v("隔离运行在主机上不同进程")])]),s._v(" "),t("p",[s._v("Dockerfile 定义了如何构建一个 Docker 镜像")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go build -o main .")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./main"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("这个 dockerfile")]),s._v(" "),t("ol",[t("li",[s._v("使用官方"),t("code",[s._v("golang:1.20")]),s._v("镜像作为构建环境")]),s._v(" "),t("li",[s._v("把所有文件复制到"),t("code",[s._v("/app")])]),s._v(" "),t("li",[s._v("在容器内构建 Go 可执行文件"),t("code",[s._v("main")])]),s._v(" "),t("li",[s._v("设置默认执行命令为"),t("code",[s._v("./main")])])]),s._v(" "),t("p",[s._v("在本地执行以下命令来构建和运行镜像")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" myapp "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run myapp\n")])])]),t("p",[s._v("其中")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("部分")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("docker build")])]),s._v(" "),t("td",[s._v("表示你要构建一个 Docker 镜像")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-t myapp")])]),s._v(" "),t("td",[s._v("给镜像起个名字（tag）叫 "),t("code",[s._v("myapp")]),s._v("，等同于 "),t("code",[s._v("--tag myapp")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(".")])]),s._v(" "),t("td",[s._v("表示根据"),t("strong",[s._v("当前目录")]),s._v("构建上下文（会将此目录的文件发送给 Docker 引擎使用）")])])])]),s._v(" "),t("p",[s._v("即：在当前目录下查找"),t("code",[s._v("Dockerfile")]),s._v("，然后构建一个镜像，并命名为"),t("code",[s._v("myapp")])]),s._v(" "),t("p",[s._v("这样的构建是有问题的：使用了 "),t("strong",[s._v("构建 + 运行")]),s._v("混合的镜像（未分阶段）")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("golang:1.20")]),s._v(" 镜像很大（约 1GB+），包含编译器、工具链，不适合运行时部署")]),s._v(" "),t("li",[s._v("生成的镜像包含了源代码和构建缓存，不干净、不安全")])]),s._v(" "),t("p",[s._v("就是说，如果像上述做法打包，将一次性将 Go 源码、编译工具链（Go Build）、编译缓存和可执行文件都打包，构建后镜像至少高达 800MB+，这对于部署、安全、传输都很不妙")]),s._v(" "),t("p",[s._v("正确的做法是多阶段构建（Multi-stage build）")]),s._v(" "),t("ul",[t("li",[s._v("多阶段构建是一种在一个 Dockerfile 中使用多个"),t("code",[s._v("FROM")]),s._v("段落，"),t("strong",[s._v("用前面的镜像构建产物")]),s._v("，最后用一个"),t("strong",[s._v("干净的基础镜像")]),s._v("打包最终产物，从而实现“构建和运行分离”")])]),s._v(" "),t("p",[s._v("多阶段构建：只打包“最终产物”")]),s._v(" "),t("ul",[t("li",[s._v("它的核心思想："),t("strong",[s._v("用一个镜像“编译”，再用另一个镜像“运行”")])])]),s._v(" "),t("p",[s._v("例如")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# === 第一阶段：构建镜像（builder）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.20 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" go.mod go.sum ./")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go mod download")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" CGO_ENABLED=0 GOOS=linux go build -o main .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# === 第二阶段：运行镜像（干净、最小）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine:latest")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /app/main .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./main"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("第一阶段：构建产物")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.20 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n")])])]),t("ul",[t("li",[s._v("用官方带编译器的 Golang 镜像构建可执行文件")]),s._v(" "),t("li",[t("code",[s._v("AS builder")]),s._v("给这个阶段命个名字，后面可以引用")])]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[s._v("go.mod go.sum ./ && RUN go mod download\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . . && RUN go build -o main .")]),s._v("\n")])])]),t("p",[s._v("这是 go 项目的常规构建过程")]),s._v(" "),t("p",[s._v("第二阶段：最小运行时镜像")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine:latest")]),s._v("\n")])])]),t("ul",[t("li",[s._v("超小镜像（仅 5MB 左右）")]),s._v(" "),t("li",[s._v("不含 Go 编译器，不含源码，不含构建缓存 —— 非常安全干净")])]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /app/main .")]),s._v("\n")])])]),t("ul",[t("li",[s._v("仅把前面构建出的可执行文件 "),t("code",[s._v("main")]),s._v(" 复制过来，其它统统不要")])]),s._v(" "),t("p",[s._v("这样将获得一个 20MB 左右的运行镜像，用于生产部署，而构建镜像作为临时产物将被丢弃掉，不参与最后的部署")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("优点")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("✅ 更小的镜像")]),s._v(" "),t("td",[s._v("只包含运行必需文件")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 更安全")]),s._v(" "),t("td",[s._v("去除了构建工具、源码等敏感内容")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 更快部署")]),s._v(" "),t("td",[s._v("镜像传输快，容器启动快")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 适合 CI/CD")]),s._v(" "),t("td",[s._v("用"),t("code",[s._v("docker build")]),s._v("一次构建，产出即部署级镜像")])])])]),s._v(" "),t("p",[s._v("在当前目录下测试构建运行")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" myMultiApp "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" myMkultiApp\n")])])]),t("p",[s._v("简单来说：多阶段构建 = 构建与运行分离，使用“胖”镜像编译代码，用“瘦”镜像跑服务")]),s._v(" "),t("h3",{attrs:{id:"spring-应用容器化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-应用容器化"}},[s._v("#")]),s._v(" Spring 应用容器化")]),s._v(" "),t("p",[s._v("以一个简单的Spring Boot Web应用程序为例，包含以下特点")]),s._v(" "),t("ul",[t("li",[s._v("Spring Boot 3")]),s._v(" "),t("li",[s._v("Java 17")]),s._v(" "),t("li",[s._v("Maven 构建工具")]),s._v(" "),t("li",[s._v("RESTful API 接口")]),s._v(" "),t("li",[s._v("标准的项目结构")])]),s._v(" "),t("p",[s._v("项目结构如下")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("|——src/\n|\t|—— main/\n|\t|\t|—— java/\n|\t|\t|\t|__ cia/arkrypto/demoapp/\n|\t|\t|__ resources/\n|\t|__ test/\n|—— pom.xml\n|—— Dockerfile\n|__ kubernetes/\n\t|—— deployment.yaml\n\t|—— service.yaml\n\t|__ ingress.yaml\n")])])]),t("p",[s._v("验证本地环境")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-version")]),s._v("\nmvn "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-version")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--version")]),s._v("\nkubectl version\n")])])]),t("p",[s._v("容器化 Spring 应用：我们需要创建一个 Dockerfile 来构建应用容器，使用多阶段构建来优化最终镜像大小")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一阶段：构建应用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" maven:3.8-openjdk-17 AS build")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" pom.xml .")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mvn dependency:go-offline -BCOPY src ./srcRUN mvn package -DskipTests")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二阶段：运行应用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" openjdk:17-jre-slim")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" --from=build /app/target/demoapp-0.1.jar app.jar")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 8080")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-jar"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.jar"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("和上面多阶段部署的样例一样，这个 Dockerfile 包含两个阶段")]),s._v(" "),t("ul",[t("li",[s._v("构建阶段：使用 Maven 构建应用")]),s._v(" "),t("li",[s._v("运行阶段：使用精简版 JRE 运行应用")])]),s._v(" "),t("p",[s._v("构建并测试 Docker 镜像")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建镜像")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" demoapp:latest "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试运行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 demoapp:latest\n")])])]),t("p",[s._v("OK，这样就好了，当启动镜像后，就可以在本地的 8080 端口访问这个 Spring 应用")]),s._v(" "),t("ul",[t("li",[s._v("进一步的，如果有配套的 CI 工具（比如说 Jenkins），就可以将这个镜像 demoapp 推送到对应的服务器上并执行容器启动命令"),t("code",[s._v("docker run")]),s._v("，就完成了一次全自动的打包和部署")])]),s._v(" "),t("h3",{attrs:{id:"docker-compose-编排"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-编排"}},[s._v("#")]),s._v(" Docker-Compose 编排")]),s._v(" "),t("p",[s._v("Docker-Compose：定义多个 Docker 容器的运行方式")]),s._v(" "),t("p",[s._v("docker-compose.yaml")]),s._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8080:8080"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("depends_on")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" db\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("db")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.0")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n")])])]),t("p",[s._v("上述 docker-compose 包含两个服务")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("app")]),s._v(": 用当前目录构建的应用容器")]),s._v(" "),t("li",[t("code",[s._v("db")]),s._v(": 使用 MySQL 8.0 镜像的数据库容器")])]),s._v(" "),t("p",[s._v("各字段含义")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("字段")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("version: '3'")])]),s._v(" "),t("td",[s._v("指定 compose 文件版本（v3 通常用于 Docker Engine + Swarm）")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("services")])]),s._v(" "),t("td",[s._v("定义所有容器服务")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("app.build: .")])]),s._v(" "),t("td",[s._v("当前目录构建（寻找"),t("code",[s._v("Dockerfile")]),s._v("）")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("ports: 8080:8080")])]),s._v(" "),t("td",[s._v("本地 8080 映射到容器 8080")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("depends_on")])]),s._v(" "),t("td",[s._v("让"),t("code",[s._v("app")]),s._v("在"),t("code",[s._v("db")]),s._v("之后启动（注意：不是等待 DB 可用，仅顺序）")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("db.image")])]),s._v(" "),t("td",[s._v("使用官方 MySQL 8.0 镜像")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("db.environment")])]),s._v(" "),t("td",[s._v("设置 root 用户密码为"),t("code",[s._v("example")])])])])]),s._v(" "),t("p",[s._v("在含有"),t("code",[s._v("Dockerfile")]),s._v("和"),t("code",[s._v("docker-compose.yml")]),s._v("的目录运行")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--build")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v("\n")])])]),t("ul",[t("li",[t("code",[s._v("docker-compose")]),s._v(": 使用 Docker Compose 工具（多容器编排）")]),s._v(" "),t("li",[t("code",[s._v("up")]),s._v(": 表示启动所有服务")]),s._v(" "),t("li",[t("code",[s._v("--build")]),s._v(": 表示在启动前先强制重新构建服务镜像")]),s._v(" "),t("li",[t("code",[s._v("-d")]),s._v("：表示后台运行")])]),s._v(" "),t("p",[s._v("Docker 将")]),s._v(" "),t("ol",[t("li",[s._v("解析 compose 文件")]),s._v(" "),t("li",[s._v("找到 Dockerfile 构建 APP 镜像")]),s._v(" "),t("li",[s._v("拉取远程镜像（MySQL 8.0）")]),s._v(" "),t("li",[s._v("创建网络")]),s._v(" "),t("li",[s._v("创建并启动容器")]),s._v(" "),t("li",[s._v("日志输出并后台运行")])]),s._v(" "),t("p",[s._v("注意")]),s._v(" "),t("p",[t("code",[s._v("--build")]),s._v("将会强制重新构建、拉取镜像，如果不加，默认"),t("strong",[s._v("不会")]),s._v("重新构建镜像，会直接用上次构建好的本地镜像（只要镜像没删掉，Docker Compose 会复用它）")]),s._v(" "),t("ul",[t("li",[s._v("这是 Docker 的“增量构建”和“缓存重用”机制")])]),s._v(" "),t("p",[s._v("当命令没有加上"),t("code",[s._v("-d")]),s._v("时，将默认为前台运行，即按下 ctrl c 后，将发送"),t("code",[s._v("SIGINT")]),s._v("给所有容器并关闭")]),s._v(" "),t("p",[s._v("查看当前容器组状态")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n")])])]),t("p",[s._v("停止后台的容器组")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" down\n")])])]),t("p",[s._v("这会停止并移除容器、网络、默认卷（但不会删除镜像）")]),s._v(" "),t("p",[s._v("如需彻底删除")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" down "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--volumes")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rmi")]),s._v(" all\n")])])]),t("h2",{attrs:{id:"容器逃逸"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器逃逸"}},[s._v("#")]),s._v(" 容器逃逸")]),s._v(" "),t("p",[s._v("“容器逃逸”（Container Escape）是容器安全中非常核心、也非常危险的一个概念，一句话来说：容器逃逸指攻击者通过某种方式，从容器内部突破隔离机制，进入或控制宿主机（Host OS），进而可能影响其他容器或整个系统")]),s._v(" "),t("p",[s._v("容器逃逸的典型方式")]),s._v(" "),t("p",[s._v("1️⃣ 内核漏洞")]),s._v(" "),t("ul",[t("li",[s._v("容器和宿主机共用 Linux 内核，如果容器里运行的程序触发了内核漏洞，就可能直接提权")]),s._v(" "),t("li",[s._v("例子：CVE-2022-0185、Dirty Pipe（CVE-2022-0847）、Dirty Cow（CVE-2016-5195）")])]),s._v(" "),t("p",[s._v("2️⃣ 特权容器（Privileged Container）")]),s._v(" "),t("ul",[t("li",[s._v("如果容器被配置成 "),t("code",[s._v("--privileged")]),s._v(" 模式，它几乎拥有宿主机上的所有能力，非常危险")]),s._v(" "),t("li",[s._v("如果攻击者控制了这种容器，可以访问设备节点、修改内核模块等，轻松逃逸")])]),s._v(" "),t("p",[s._v("3️⃣ 挂载宿主机目录：")]),s._v(" "),t("ul",[t("li",[s._v("如果宿主机的敏感路径（如 "),t("code",[s._v("/etc")]),s._v("、"),t("code",[s._v("/var/run/docker.sock")]),s._v("）被挂载到容器中，容器内的进程可以直接控制宿主机")])]),s._v(" "),t("p",[s._v("4️⃣ 容器运行时漏洞（如 Docker、containerd）")]),s._v(" "),t("ul",[t("li",[s._v("如果容器运行时本身有漏洞，攻击者可以利用这些缺陷突破隔离")]),s._v(" "),t("li",[s._v("例如：runc 早期版本有直接实现容器逃逸的漏洞")])]),s._v(" "),t("p",[s._v("逃逸的后果")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("后果")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("访问主机系统")]),s._v(" "),t("td",[s._v("攻击者可读取主机文件、用户信息")])]),s._v(" "),t("tr",[t("td",[s._v("横向移动")]),s._v(" "),t("td",[s._v("攻击者可攻击其他容器或服务")])]),s._v(" "),t("tr",[t("td",[s._v("控制宿主网络")]),s._v(" "),t("td",[s._v("劫持流量，监控通信")])]),s._v(" "),t("tr",[t("td",[s._v("安装后门")]),s._v(" "),t("td",[s._v("实现持续性控制（APT）")])]),s._v(" "),t("tr",[t("td",[s._v("删除/加密数据")]),s._v(" "),t("td",[s._v("类似勒索软件行为")])])])]),s._v(" "),t("p",[s._v("如何防止容器逃逸")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("防御手段")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("✅ 使用最小权限原则")]),s._v(" "),t("td",[s._v("不使用 "),t("code",[s._v("--privileged")]),s._v("，只赋予必要的 "),t("code",[s._v("capabilities")])])]),s._v(" "),t("tr",[t("td",[s._v("✅ 不挂载敏感主机路径")]),s._v(" "),t("td",[s._v("如 "),t("code",[s._v("/var/run/docker.sock")]),s._v("、"),t("code",[s._v("/etc")])])]),s._v(" "),t("tr",[t("td",[s._v("✅ 运行非 root 用户")]),s._v(" "),t("td",[s._v("尽量使用非 root 账户运行容器")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 使用内核安全模块")]),s._v(" "),t("td",[s._v("如 AppArmor、SELinux、Seccomp，限制系统调用")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 隔离运行时")]),s._v(" "),t("td",[s._v("用 gVisor、Kata Containers 等沙箱运行技术增强隔离性")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 定期更新内核与 Docker 版本")]),s._v(" "),t("td",[s._v("修复已知漏洞")])]),s._v(" "),t("tr",[t("td",[s._v("✅ 使用容器扫描工具")]),s._v(" "),t("td",[s._v("如 Trivy、Aqua、Sysdig 识别潜在风险")])])])]),s._v(" "),t("p",[s._v("容器逃逸 = 容器“突破封锁”访问主机系统，是一种非常严重的安全风险，尤其是在多租户平台（如 Kubernetes 集群）中")]),s._v(" "),t("ul",[t("li",[s._v("部署生产容器时，安全配置必须严格审查")])]),s._v(" "),t("h2",{attrs:{id:"k8s-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#k8s-基础"}},[s._v("#")]),s._v(" K8s 基础")]),s._v(" "),t("p",[s._v("Kubernetes 是用于自动部署、扩展和容器化应用程序的开源系统")]),s._v(" "),t("h3",{attrs:{id:"k8s-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#k8s-概述"}},[s._v("#")]),s._v(" K8s 概述")]),s._v(" "),t("p",[s._v("我们回顾一下，Docker 的三个主要概念和核心目的")]),s._v(" "),t("ul",[t("li",[s._v("三个概念：容器（运行在虚拟机上的进程）、镜像（容器的”源码“）、仓库（镜像库）")]),s._v(" "),t("li",[s._v("核心目的：为应用程序提供运行环境，并隔离运行在主机上不同进程")])]),s._v(" "),t("p",[s._v("当使用的容器服务多了，面临的访问量增大以后，或者是在分布式架构下涉及到复杂的相互调用，容器间的编排显得尤为重要，错误的编排调用策略将导致一片混乱")]),s._v(" "),t("p",[s._v("于是我们需要一种工具把这些容器统一的管理起来，需要实现对这些个容器的自动部署、扩展和管理，也就是所谓的容器编排，K8s 正是这样一个自动化容器编排的系统")]),s._v(" "),t("p",[s._v("其优点如下")]),s._v(" "),t("ul",[t("li",[s._v("可移植性、灵活性和可扩展性")]),s._v(" "),t("li",[s._v("支持命令式/声明式配置和自动化")]),s._v(" "),t("li",[s._v("CNCF 的一个毕业项目，生态系统庞大")])]),s._v(" "),t("h3",{attrs:{id:"k3s-部署监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#k3s-部署监控"}},[s._v("#")]),s._v(" K3s 部署监控")]),s._v(" "),t("p",[s._v("K3s 是 Rancher 实验室的一个轻量级 Kubernetes 发行版，是由 CNCF 完全认证的 Kubernetes 产品，适合在资源受限的硬件上使用（例如 IoT 设备），它保留了 Kubernetes 的核心功能，但通过去除一些不必要的组件（如云服务提供商集成）来减小二进制文件的大小（K3s 的基础二进制包大小不到 100MB）")]),s._v(" "),t("p",[s._v("需要注意的是轻量级带来的功能缺失，如")]),s._v(" "),t("ul",[t("li",[s._v("K3s 目前不支持在主节点上运行除 SQLite 以外的任何其他数据库")]),s._v(" "),t("li",[s._v("不支持多个主节点")])]),s._v(" "),t("p",[s._v("故而在选择默认容器编排器时，定义需求和目标非常重要")]),s._v(" "),t("p",[s._v("部署监控流程")]),s._v(" "),t("ol",[t("li",[s._v("容器化：使用"),t("code",[s._v("Docker")]),s._v("构建 Spring 微服务；使用"),t("code",[s._v("Helm")]),s._v("部署微服务")]),s._v(" "),t("li",[s._v("K3s 基础：安装 K3s，创建 Deployment、Service、Ingress")]),s._v(" "),t("li",[s._v("应用部署：依次 apply deployment、service、ingress，并进行部署验证 kubectl get")]),s._v(" "),t("li",[s._v("验证和测试：检查应用状态、访问应用")]),s._v(" "),t("li",[s._v("服务监控：Prometheus + Grafana 进行监控，Loki + Promtail 进行日志采集")])]),s._v(" "),t("p",[s._v("快速安装")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-sfL")]),s._v(" https://get.k3s.io "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查就绪代码")]),s._v("\ntakes maybe "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" seconds\nk3s kubectl get "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v("\n")])])]),t("p",[s._v("三个配置文件")]),s._v(" "),t("ul",[t("li",[s._v("deployment.yaml")]),s._v(" "),t("li",[s._v("service.yaml")]),s._v(" "),t("li",[s._v("ingress.yaml")])]),s._v(" "),t("p",[s._v("常见问题及解决方案")]),s._v(" "),t("p",[s._v("Pod 启动失败")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("kubectl describe pod "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("pod-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nkubectl logs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("pod-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("服务无法访问")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("kubectl get endpoints demoapp\nkubectl describe "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" demoapp\n")])])]),t("p",[s._v("Ingress 问题")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("kubectl describe ingress demoapp\nkubectl get events\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);