(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{1490:function(v,_,i){"use strict";i.r(_);var l=i(5),t=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"事务引擎"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务引擎"}},[v._v("#")]),v._v(" 事务引擎")]),v._v(" "),_("p",[v._v("事务处理、并发和恢复")]),v._v(" "),_("img",{attrs:{src:i(568)}}),v._v(" "),_("p",[v._v("事务是数据库中最小的工作逻辑单元，数据库需要保证")]),v._v(" "),_("ol",[_("li",[v._v("一个事务内部的所有语句，要么都执行，要么都不执行")]),v._v(" "),_("li",[v._v("对多事务并发存取同一数据的操作加以控制，以保证数据库的正确性")])]),v._v(" "),_("h3",{attrs:{id:"事务概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务概述"}},[v._v("#")]),v._v(" 事务概述")]),v._v(" "),_("p",[v._v("事务（transaction）：访问并可能更新各种数据项的一个程序执行单元")]),v._v(" "),_("p",[v._v("两个关键问题：恢复与并发控制")]),v._v(" "),_("ol",[_("li",[v._v("如何应对各种故障，如硬件错误、系统崩溃")]),v._v(" "),_("li",[v._v("多事务并发执行")])]),v._v(" "),_("p",[v._v("事务的要求：ACID")]),v._v(" "),_("ul",[_("li",[v._v("原子性（Atomicity）")]),v._v(" "),_("li",[v._v("一致性（Consistence）")]),v._v(" "),_("li",[v._v("隔离性（Isolation）")]),v._v(" "),_("li",[v._v("持久性（Durability）")])]),v._v(" "),_("p",[v._v("如何保障原子性")]),v._v(" "),_("ol",[_("li",[v._v("日志：DBMS 用日志记录所有的操作，事务一旦中止，可以回溯日志以回滚操作")]),v._v(" "),_("li",[v._v("影子分页技术：对页面拷贝，事务优先在拷贝页面上执行，仅当执行提交（commit）后，才持久化可见")])]),v._v(" "),_("p",[v._v("如何实现一致性：DBMS 本身无法控制和确保事务的一致性，"),_("strong",[v._v("保证事务一致性")]),v._v("应是上层应用的职责")]),v._v(" "),_("p",[v._v("隔离性：事务之间相互隔离，即对并发执行的其他事务无感知")]),v._v(" "),_("ul",[_("li",[v._v("注意保证隔离性并不等于无法并发，而是需要加上并发控制")])]),v._v(" "),_("p",[v._v("持久性实现技术：日志；影子分页技术")]),v._v(" "),_("h3",{attrs:{id:"事务调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务调度"}},[v._v("#")]),v._v(" 事务调度")]),v._v(" "),_("p",[v._v("数据库是共享资源，为了充分利用系统资源，应尽可能使得多个事务并发执行。现阶段许多计算机具有多个中央处理器或一个处理器具有多个运算器，使得事务的并发执行更为容易。为了在提高事务并发性的同时保证事务的ACID特性，我们需要合理设置事务并发执行的顺序，即进行事务的调度")]),v._v(" "),_("ul",[_("li",[v._v("事务调度：多个并发事务的操作穿插执行的顺序")])]),v._v(" "),_("p",[v._v("事务的穿插执行可能破坏一致性（C）")]),v._v(" "),_("p",[v._v("什么样的调度是正确的")]),v._v(" "),_("ul",[_("li",[v._v("串行调度：没有事务调度，严格将事务依次执行（只要上层实现了一致性，串行调度将不会破坏 C）")]),v._v(" "),_("li",[v._v("可串行化调度：如果一个调度 S 等价于另一个"),_("strong",[v._v("串行化")]),v._v("的调度 S’，那么这个调度 S 称为可串行化的")]),v._v(" "),_("li",[v._v("调度等价\n"),_("ul",[_("li",[_("strong",[v._v("冲突")]),v._v("可串行化")]),v._v(" "),_("li",[v._v("视图可串行化")])])])]),v._v(" "),_("p",[v._v("什么是冲突？操作 Ai 和操作 Aj 冲突，当且仅当他们分属两个事务，都访问同一数据元组 Q 且至少有一个为 W 写操作，如")]),v._v(" "),_("img",{attrs:{src:i(569)}}),v._v(" "),_("p",[v._v("我们假设"),_("code",[v._v("A = 1000, B = 2000")])]),v._v(" "),_("p",[v._v("读写冲突 →")]),v._v(" "),_("ul",[_("li",[v._v("不可重复读：在一个事务中，前后重复读同一元组，元组存在改变（两次读之间数据被写了）")]),v._v(" "),_("li",[v._v("幻读：事务的前后两次"),_("code",[v._v("count(*)")]),v._v("不一致，中途有另一个事务进行了写操作新增了数据条目")])]),v._v(" "),_("img",{attrs:{src:i(570)}}),v._v(" "),_("p",[v._v("写读冲突 → 脏读：读到了写过程中的临时数据，即读到了未提交 uncommitted 的数据")]),v._v(" "),_("img",{attrs:{src:i(571)}}),v._v(" "),_("p",[v._v("写写冲突 → 丢失修改：写写没加锁，覆盖了一次写的提交 commit")]),v._v(" "),_("img",{attrs:{src:i(572)}}),v._v(" "),_("p",[v._v("冲突等价")]),v._v(" "),_("ul",[_("li",[v._v("当调度 S（包含若干事务）仅通过交换若干无冲突的操作的次序可得到调度 S’，则称调度 S 和调度 S’ 冲突等价")]),v._v(" "),_("li",[v._v("所有有冲突的操作间的次序不变：读写、写读、写写")])]),v._v(" "),_("p",[v._v("若冲突等价的调度 S' 是串行调度，那么我们说调度 S 是冲突可串行化的")]),v._v(" "),_("p",[v._v("如何判断一个调度是冲突可串行化？优先图 precedence graph")]),v._v(" "),_("ul",[_("li",[v._v("有向图")]),v._v(" "),_("li",[v._v("节点：事务")]),v._v(" "),_("li",[v._v("有向边：两个事务的操作冲突（读写、写读、写写）")]),v._v(" "),_("li",[v._v("操作在先的事务 "),_("strong",[v._v("→")]),v._v(" 操作在后的事务")]),v._v(" "),_("li",[v._v("可结合涉及的操作数对边做标记")])]),v._v(" "),_("p",[v._v("冲突可串行化测试：有向图的环检测")]),v._v(" "),_("p",[v._v("视图等价")]),v._v(" "),_("ul",[_("li",[v._v("当调度 S 和调度 S’ 包含相同事务集合，且满足下述条件，则称调度 S 和调度 S’ 视图等价\n"),_("ol",[_("li",[v._v("对于每个数据项 Q，若事务 Ti 在调度 S 中读取了 Q 的初始值，那么在调度 S’ 中 Ti 也必须读取 Q 的初始值")]),v._v(" "),_("li",[v._v("对于每个数据项 Q，若在调度 S 中，事务 Ti 执行了 R(Q) 并且所读取的那个值是由事务 Tj 执行 W(Q) 操作产生的，则在调度 S’ 中，Ti 的 R(Q) 操作所读取的 Q 值也必须是由 Tj 的同一个 W(Q) 操作产生的")]),v._v(" "),_("li",[v._v("对于每个数据项 Q，若在调度 S 中（如果有）事务执行了最后的 W(Q) 操作，则在调度 S’ 中该事务也必须执行最后的 W(Q) 操作")])])]),v._v(" "),_("li",[v._v("条件 1 和 2 保证了两个调度中每个事务读取相同的值")]),v._v(" "),_("li",[v._v("条件 3 和前两个条件一起保证了两个调度产生相同的最终状态")])]),v._v(" "),_("p",[v._v("视图可串行化：当调度 S 与另一串行调度 S'' 是视图等价的，则称调度 S 是视图可串行化的")]),v._v(" "),_("img",{attrs:{src:i(573)}}),v._v(" "),_("h3",{attrs:{id:"并发控制技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发控制技术"}},[v._v("#")]),v._v(" 并发控制技术")]),v._v(" "),_("p",[v._v("并发控制机制：根据某种协议、准则实现将多个并发事务的操作穿插执行，同时还能维护隔离性（从单独事务的视角看仍是独立执行）")]),v._v(" "),_("p",[v._v("并发控制机制分类")]),v._v(" "),_("ul",[_("li",[v._v("乐观的并发机制：认为冲突很罕见，仅在发生时进行处理，如在检查后发现该事务执行过程中出现冲突影响了可串行性，则撤销该事务")]),v._v(" "),_("li",[v._v("悲观的并发机制：认为冲突很普遍，将冲突尽可能扼杀在摇篮，会限制系统性能")])]),v._v(" "),_("p",[v._v("基于锁的并发控制（悲观的）")]),v._v(" "),_("ul",[_("li",[v._v("互斥锁：如果一个事务获得了互斥锁，既可读又可写")]),v._v(" "),_("li",[v._v("共享锁：如果一个事务获得了共享锁，只可读不可写")])]),v._v(" "),_("p",[v._v("基于时间戳的并发控制（乐观的）：对每个数据项维护两个时间戳，读时间戳和写时间戳，记录数据项最近一次被读/写的时间")]),v._v(" "),_("p",[v._v("其他并发控制")]),v._v(" "),_("ul",[_("li",[v._v("基于 MVCC 的并发控制：根据版本快照实现，会产生多余的快照")]),v._v(" "),_("li",[v._v("基于有效性检查的并发控制")])]),v._v(" "),_("h3",{attrs:{id:"数据库日志和恢复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库日志和恢复"}},[v._v("#")]),v._v(" 数据库日志和恢复")]),v._v(" "),_("p",[v._v("数据库日志：每次更改数据之前，先在日志中添加对应的记录")]),v._v(" "),_("ul",[_("li",[v._v("作用：事务日志是数据库的重要组件，如果系统出现故障，则可能需要使用事务日志将数据库恢复到一致状态")]),v._v(" "),_("li",[v._v("意义：支持多用户同时操作；恢复错误事务")])]),v._v(" "),_("p",[v._v("日志分类：错误日志、普通查询日志、二进制日志、中继日志、慢查询日志、DDL 日志")]),v._v(" "),_("p",[v._v("日志规则：undo 撤销、redo 重做、binlog 写入二进制文件")]),v._v(" "),_("p",[v._v("数据库恢复算法")]),v._v(" "),_("ul",[_("li",[v._v("故障前策略")]),v._v(" "),_("li",[v._v("故障后机制")]),v._v(" "),_("li",[v._v("基于日志的恢复")])]),v._v(" "),_("h2",{attrs:{id:"向量数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向量数据库"}},[v._v("#")]),v._v(" 向量数据库")]),v._v(" "),_("h3",{attrs:{id:"向量数据库简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向量数据库简介"}},[v._v("#")]),v._v(" 向量数据库简介")]),v._v(" "),_("p",[v._v("向量数据是"),_("strong",[v._v("人工智能")]),v._v("理解世界的数据形式")]),v._v(" "),_("ul",[_("li",[v._v("现实世界的实体具有多模特性，如文本、图片、图、时间序列等")]),v._v(" "),_("li",[v._v("嵌入模型可以将这些实体转换为向量，利用向量来表征原始实体的语义信息\n"),_("ul",[_("li",[v._v("CNN、Word2Vec、Doc2Vec 和 Node2Vec 等")])])]),v._v(" "),_("li",[v._v("寻找相似的实体转换为寻找相似的向量\n"),_("ul",[_("li",[v._v("实体的相似性查询")]),v._v(" "),_("li",[v._v("向量的相似性查询")])])])]),v._v(" "),_("img",{attrs:{src:i(574)}}),v._v(" "),_("p",[v._v("检索增强生成")]),v._v(" "),_("ul",[_("li",[v._v("大模型存在幻觉、训练周期长、知识更新不及时等问题")]),v._v(" "),_("li",[v._v("使用外部知识库进行检索增强生成（Retrieval-Augmented Generation, RAG）")]),v._v(" "),_("li",[v._v("向量数据库在 RAG 中起到关键作用，已经成为支撑大模型的重要基础设施")])]),v._v(" "),_("img",{attrs:{src:i(575)}}),v._v(" "),_("p",[v._v("向量数据库分为")]),v._v(" "),_("ul",[_("li",[v._v("专用向量数据库：专门用来进行向量存储和查询，如 Faiss、Milvus 等等")]),v._v(" "),_("li",[v._v("通用向量数据库：在关系数据库系统中支持向量检索，如 PASE")])]),v._v(" "),_("p",[v._v("最近邻查询是向量数据库的基础操作")]),v._v(" "),_("ul",[_("li",[v._v("最近邻查询：给定一个查询向量 q，找到数据集中距离 q 最近的向量 → “维数灾难”，精确最近邻查询效率低")]),v._v(" "),_("li",[v._v("近似最近邻查询：给定一个查询 q，找到数据集中距离 q 足够近的向量 → 近似可以用查询结果的 recall 或 distance ratio 来衡量")])]),v._v(" "),_("p",[v._v("设计查询方法主要考虑的因素")]),v._v(" "),_("ul",[_("li",[v._v("存储介质与数据规模相关")]),v._v(" "),_("li",[v._v("索引结构选取与查询性能直接相关")]),v._v(" "),_("li",[v._v("GPU 提升查询效率（吞出率）")]),v._v(" "),_("li",[v._v("距离计算是查询过程的主要开销来源")])]),v._v(" "),_("p",[v._v("经典查询场景：（数据+索引）存放在内存中，使用索引（图索引效果较好），CPU 进行计算，不考虑距离加速技术")]),v._v(" "),_("p",[v._v("典型查询方法")]),v._v(" "),_("ul",[_("li",[v._v("Baseline 解决方案 —— 线性扫描（Linear Scan）")]),v._v(" "),_("li",[v._v("有效的 NN 方案，需要高效的索引结构")])]),v._v(" "),_("p",[v._v("索引是常见的近似最近邻查询方法，常见的索引有局部敏感哈希（LSH）、倒排文档、树、图索引等，其中图索引查询性能最好")]),v._v(" "),_("p",[v._v("图索引参数的选取，可以基于机器学习进行")]),v._v(" "),_("ul",[_("li",[v._v("建立构建参数 → 查询性能的预测模型")]),v._v(" "),_("li",[v._v("根据小样本训练数据，筛选少数高质量的候选构建参数")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("方法")]),v._v(" "),_("th",[v._v("构建时间")]),v._v(" "),_("th",[v._v("存储空间")]),v._v(" "),_("th",[v._v("查询性能")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("LSH方法")]),v._v(" "),_("td",[_("code",[v._v("O(n*d*m*l)")])]),v._v(" "),_("td",[_("code",[v._v("O(n*l)")])]),v._v(" "),_("td",[v._v("较差")])]),v._v(" "),_("tr",[_("td",[v._v("树形结构")]),v._v(" "),_("td",[_("code",[v._v("O(n*log n*d)")])]),v._v(" "),_("td",[_("code",[v._v("O(n*d)")])]),v._v(" "),_("td",[v._v("较差")])]),v._v(" "),_("tr",[_("td",[v._v("倒排文档")]),v._v(" "),_("td",[_("code",[v._v("O(t*n*k*d)")])]),v._v(" "),_("td",[_("code",[v._v("O(k*d+n)")])]),v._v(" "),_("td",[v._v("一般")])]),v._v(" "),_("tr",[_("td",[v._v("邻域图")]),v._v(" "),_("td",[_("code",[v._v("O(nt*d), 1<t<2")])]),v._v(" "),_("td",[_("code",[v._v("O(n*k)")])]),v._v(" "),_("td",[v._v("好")])])])]),v._v(" "),_("h3",{attrs:{id:"大规模向量数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大规模向量数据库"}},[v._v("#")]),v._v(" 大规模向量数据库")]),v._v(" "),_("p",[v._v("海量高维数据：百亿千维，大约 40TB，数据+索引无法放进单机内存中")]),v._v(" "),_("p",[v._v("解决方案")]),v._v(" "),_("ol",[_("li",[v._v("数据压缩（in-memory）：对数据集进行量化压缩，使压缩数据集可放置在主存中\n"),_("ul",[_("li",[v._v("优点：内存占用小，配合倒排索引等手段搜索延迟可接受")]),v._v(" "),_("li",[v._v("缺点：有损压缩，搜索准确度（recall）低")])])]),v._v(" "),_("li",[v._v("数据分片（in-memory）：将数据划分为不相交的分片，每台机器托管一个分片并独立构建索引\n"),_("ul",[_("li",[v._v("优点：搜索延迟低，精度高")]),v._v(" "),_("li",[v._v("缺点：更高的内存使用量以及机器使用数，成本开销大")])])]),v._v(" "),_("li",[v._v("外存方法（in-disk）：将索引和数据放在外存（Disk/SSD）\n"),_("ul",[_("li",[v._v("优点：单机下可执行查询操作，需要的计算资源少")]),v._v(" "),_("li",[v._v("缺点：导致搜索延迟灾难性增加以及吞吐率下降")])])])]),v._v(" "),_("p",[v._v("向量压缩技术")]),v._v(" "),_("ul",[_("li",[v._v("力求空间小、查询精度损失小以及较高的查询效率")]),v._v(" "),_("li",[v._v("常见的向量压缩技术有：哈希、标量量化以及乘积量化")])]),v._v(" "),_("p",[v._v("I/O 高效算法，即外存方法：核心思想是对内存算法进行适配，在原始向量上进行距离计算")]),v._v(" "),_("p",[v._v("早期方法")]),v._v(" "),_("ul",[_("li",[v._v("VA-File")]),v._v(" "),_("li",[v._v("LSH 方法")]),v._v(" "),_("li",[v._v("假设内存足够小，内存并不预先存放索引或数据")])]),v._v(" "),_("p",[v._v("近期趋势")]),v._v(" "),_("ul",[_("li",[v._v("IVF 方法")]),v._v(" "),_("li",[v._v("图索引")]),v._v(" "),_("li",[v._v("假设内存虽然不足以存放索引+数据，但仍具有相当存储空间")]),v._v(" "),_("li",[v._v("实际上是内存-外存混合存储方法，将一部分索引或数据存放在内存中，用于减少 I/O 开销")])]),v._v(" "),_("h3",{attrs:{id:"gpu-向量数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gpu-向量数据库"}},[v._v("#")]),v._v(" GPU 向量数据库")]),v._v(" "),_("p",[v._v("在进行近似最近邻查询时，GPU 相对于 CPU 的优势主要体现在以下几个方面")]),v._v(" "),_("ul",[_("li",[v._v("并行性：GPU 的计算核心数（>1万）远远大于 CPU（几十），可以很好处理查询中的距离计算")]),v._v(" "),_("li",[v._v("内存带宽：大量的数据需要频繁地在内存中读写，GPU 的高显存带宽可以显著减少这种操作的延迟")]),v._v(" "),_("li",[v._v("专用硬件加速：Tensor Cores 可以进行高效的矩阵乘法，这在某些类型的距离计算中非常有用")])]),v._v(" "),_("p",[v._v("GPU 图索引构建")]),v._v(" "),_("ul",[_("li",[v._v("SONG 没有提出适配 GPU 的图索引，使用 HNSW 做为图索引")]),v._v(" "),_("li",[v._v("GANNS：Divide-and-Merge")]),v._v(" "),_("li",[v._v("GGNN：Divide-and-Merge")]),v._v(" "),_("li",[v._v("CAGRA：KNNG构建 + 剪枝")])]),v._v(" "),_("p",[v._v("这些方法都假设所有的数据（向量+索引）都能放在 GPU 显存中，因此构建过程不存在主存-显存之间的数据传输，所以这种假设其实并不能用于处理真正的大规模数据")]),v._v(" "),_("p",[v._v("GPU 图检索")]),v._v(" "),_("p",[v._v("设计关键")]),v._v(" "),_("ul",[_("li",[v._v("原则：提高 GPU 利用率\n"),_("ul",[_("li",[v._v("提高每个操作的并行性，减少单线程操作")]),v._v(" "),_("li",[v._v("提高每轮迭代的计算量，特别是距离计算量")])])]),v._v(" "),_("li",[v._v("一个 thread block 处理一个 query\n"),_("ul",[_("li",[v._v("避免不同 SM 之间的数据交换和同步")]),v._v(" "),_("li",[v._v("一个 SM 的计算单元足够多（128 CUDA cores/SM， RTX A6000）")])])])]),v._v(" "),_("p",[v._v("近似最近邻查询的主要操作")]),v._v(" "),_("ul",[_("li",[v._v("定位候选点\n"),_("ol",[_("li",[v._v("确定下一轮扩展点的集合")]),v._v(" "),_("li",[v._v("访问每个扩展点的边集，确定下一轮的候选点集合")])])]),v._v(" "),_("li",[v._v("距离计算：并行计算每个候选点的距离，充分发挥 GPU 的并行计算能力")]),v._v(" "),_("li",[v._v("维护数据结构：查询过程中的关键数据结构需要更新")])]),v._v(" "),_("p",[v._v("需要维护的数据结构")]),v._v(" "),_("ul",[_("li",[v._v("候选扩展点集合（expansion set）：候选扩展点集合")]),v._v(" "),_("li",[v._v("候选计算点列表（candidate list）：待进行距离计算点 ID 列表")]),v._v(" "),_("li",[v._v("临时结果集（topk）：当前找到的最近邻列表")]),v._v(" "),_("li",[v._v("已访问节点列表（visited）：为了防止重复计算某个候选点的距离（bitmap or hash table）")])]),v._v(" "),_("h3",{attrs:{id:"ai4vectordb"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ai4vectordb"}},[v._v("#")]),v._v(" AI4VectorDB")]),v._v(" "),_("p",[v._v("AI 之于向量数据库，有哪些作用，在传统的向量数据库设计中")]),v._v(" "),_("p",[v._v("索引构建")]),v._v(" "),_("ul",[_("li",[v._v("索引参数影响索引的查询性能，如 IVF、HNSW 等")]),v._v(" "),_("li",[v._v("常见方法：Grid Search, Random Search，人工调参，黑盒算法")]),v._v(" "),_("li",[v._v("缺点：参数空间大、调优开销巨大")]),v._v(" "),_("li",[v._v("目前的方法并不将参数测试的开销计入总开销当中，因此并不实用")])]),v._v(" "),_("p",[v._v("查询")]),v._v(" "),_("ul",[_("li",[v._v("查询参数同样影响查询性能， 如 IVF 的 nprobe、HNSW 的 efSearch 等")]),v._v(" "),_("li",[v._v("缺点：同样的性能要求，不同查询最优查询参数不一样，但现有方法只能设置统一的参数")]),v._v(" "),_("li",[v._v("80-20现象：80% 的查询只需要较小的查询参数，而 20% 的困难查询决定了查询参数的取值")])]),v._v(" "),_("p",[v._v("距离计算：查询过程中的主要开销来自距离计算")]),v._v(" "),_("p",[v._v("一些前沿方法，主要都是机器学习技术在图索引向量数据库中的应用")]),v._v(" "),_("img",{attrs:{src:i(576)}}),v._v(" "),_("h3",{attrs:{id:"通用向量数据库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通用向量数据库"}},[v._v("#")]),v._v(" 通用向量数据库")]),v._v(" "),_("p",[v._v("通用向量数据库 VS 专用向量数据库")]),v._v(" "),_("ul",[_("li",[v._v("接口设计\n"),_("ul",[_("li",[v._v("专用向量数据库通常提供专门为向量搜索优化的接口：Milvus 和 Faiss 提供了丰富的 API 和 SDK，专门用于高效的向量搜索和管理")]),v._v(" "),_("li",[v._v("通用向量数据库旨在在现有 RDBMS 框架内提供对向量数据的支持：通过扩展 SQL 语法来支持向量查询")])])]),v._v(" "),_("li",[v._v("数据存储布局\n"),_("ul",[_("li",[v._v("专用向量数据库：数据存储在内存中，通过内存指针直接访问")]),v._v(" "),_("li",[v._v("通用向量数据库：数据存储在外存中，需要适配现有的关系存储模型：例如 PASE 需要遵循 PostgreSQL 的页结构，访问通过缓冲区管理器")])])])]),v._v(" "),_("p",[v._v("通用向量数据库需要解决的问题")]),v._v(" "),_("ul",[_("li",[v._v("基础功能支持\n"),_("ul",[_("li",[v._v("向量数据、索引数据的存储表示")]),v._v(" "),_("li",[v._v("向量操作的接口设计")])])]),v._v(" "),_("li",[v._v("性能优化：内存管理和外存存储优化")]),v._v(" "),_("li",[v._v("新功能支持：动态数据管理：处理数据更新的同时保存高效查询性能")]),v._v(" "),_("li",[v._v("更强算力的计算平台\n"),_("ul",[_("li",[v._v("支持多线程、分布式计算以提高查询性能")]),v._v(" "),_("li",[v._v("异构计算：充分利用涉及CPU，GPU等计算单元的异构计算平台性能")])])])]),v._v(" "),_("p",[v._v("单机版：PASE 及分析（PostgreSQL）")]),v._v(" "),_("p",[v._v("PASE（Wen Yang et. al. PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension）")]),v._v(" "),_("ul",[_("li",[v._v("支持两个常用的向量索引: IVFFlat 和 HNSW")]),v._v(" "),_("li",[v._v("PASE 索引由两部分组成：索引存储层和索引功能层")]),v._v(" "),_("li",[v._v("PASE 的索引存储层包括单页结构、页面的组织、连续存储以及高维向量的跨页存储")]),v._v(" "),_("li",[v._v("PASE 的索引功能层建立在 IndexAmRoutine 之上\n"),_("ul",[_("li",[v._v("索引构建模块、索引扫描模块和一个通用模块")]),v._v(" "),_("li",[v._v("通用模块 ：向量数据格式解析器、向量相似度计算模块")])])])]),v._v(" "),_("p",[v._v("分布式版：AnalyticDB-V")]),v._v(" "),_("p",[v._v("高维向量的实时管理")]),v._v(" "),_("ul",[_("li",[v._v("PostgreSQL 和 MySQL 等在线数据库系统只适用于较低维度")]),v._v(" "),_("li",[v._v("Faiss 等向量相似性搜索引擎离线处理和构建索引，无法处理实时更新")])]),v._v(" "),_("p",[v._v("混合查询优化：如何平衡查询精度和查询效率？")]),v._v(" "),_("p",[v._v("高可扩展性和并发性")]),v._v(" "),_("ul",[_("li",[v._v("分布式系统擅长处理大规模的数据和工作负载")]),v._v(" "),_("li",[v._v("有效提高查询吞吐率")]),v._v(" "),_("li",[v._v("快速索引新插入数据")])]),v._v(" "),_("p",[v._v("AnalyticDB-V：一个用于混合查询的实时分析引擎，简称 ADBV")]),v._v(" "),_("ul",[_("li",[v._v("Lambda 架构：流处理层和批处理层，支持数据实时更新\n"),_("ul",[_("li",[v._v("流处理层：使用图索引（HNSW）管理增量数据")]),v._v(" "),_("li",[v._v("批处理层：使用基于量化索引来管理基线数据")]),v._v(" "),_("li",[v._v("定期将流处理层数据合并到批处理层")])])]),v._v(" "),_("li",[v._v("ANNS 算法：Voronoi Graph Product Quantization (VGPQ)")]),v._v(" "),_("li",[v._v("基于成本和查询准确度的混合查询优化规则")])]),v._v(" "),_("h2",{attrs:{id:"向标混合检索技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向标混合检索技术"}},[v._v("#")]),v._v(" 向标混合检索技术")]),v._v(" "),_("p",[v._v("混合检索：即有效地结合标量数据和向量数据，从而实现更精准的综合查询结果，这种技术在电子商务、医疗影像、内容推荐领域得到广泛应用")]),v._v(" "),_("img",{attrs:{src:i(577)}}),v._v(" "),_("img",{attrs:{src:i(578)}}),v._v(" "),_("img",{attrs:{src:i(579)}}),v._v(" "),_("p",[v._v("数据库中的混合索引")]),v._v(" "),_("ul",[_("li",[v._v("AnalyticDB-V 阿里 VLDB 2020 通用向量数据库")]),v._v(" "),_("li",[v._v("Milvus Zilliz SIGMOD 2021 专用向量数据库")]),v._v(" "),_("li",[v._v("VBASE 微软 OSDI 2023 通用向量数据库")])]),v._v(" "),_("p",[v._v("混合索引算法最新进展")]),v._v(" "),_("ul",[_("li",[v._v("支持标签过滤的方法：HQANN（快手）、NHQ（杭电）、Filtered-DiskANN（微软）")]),v._v(" "),_("li",[v._v("支持范围过滤的方法：SERF（阿里）、β-WST（MIT）")]),v._v(" "),_("li",[v._v("支持谓词不可知过滤的方法：ACORN（斯坦福）")])])])}),[],!1,null,null,null);_.default=t.exports},568:function(v,_,i){v.exports=i.p+"assets/img/image-20250516144752060.6b2c974b.png"},569:function(v,_,i){v.exports=i.p+"assets/img/image-20250516153141763.305eb334.png"},570:function(v,_,i){v.exports=i.p+"assets/img/image-20250516153701300.361c9d49.png"},571:function(v,_,i){v.exports=i.p+"assets/img/image-20250516153738266.9ba5794a.png"},572:function(v,_,i){v.exports=i.p+"assets/img/image-20250516154012572.b55394d4.png"},573:function(v,_,i){v.exports=i.p+"assets/img/image-20250516160142389.c11618f7.png"},574:function(v,_,i){v.exports=i.p+"assets/img/image-20250620132018696.1c283c92.png"},575:function(v,_,i){v.exports=i.p+"assets/img/image-20250620132201248.e8dd616e.png"},576:function(v,_,i){v.exports=i.p+"assets/img/image-20250620135445069.70828beb.png"},577:function(v,_,i){v.exports=i.p+"assets/img/image-20250621010324169.4224f48e.png"},578:function(v,_,i){v.exports=i.p+"assets/img/image-20250621010354039.aa01def8.png"},579:function(v,_,i){v.exports=i.p+"assets/img/image-20250621010421742.4622ef31.png"}}]);