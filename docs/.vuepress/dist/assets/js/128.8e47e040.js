(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{1551:function(t,a,s){"use strict";s.r(a);var v=s(4),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"静态代码分析概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态代码分析概述"}},[t._v("#")]),t._v(" 静态代码分析概述")]),t._v(" "),a("h3",{attrs:{id:"什么是-sca"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-sca"}},[t._v("#")]),t._v(" 什么是 SCA")]),t._v(" "),a("p",[t._v("静态代码分析（Static Code Analysis），是指在不运行程序的前提下，对源代码或中间代码（如字节码）进行分析，以发现潜在的问题、缺陷、漏洞或优化点")]),t._v(" "),a("p",[t._v("检查范围")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("检查维度")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("✅ 语法错误")]),t._v(" "),a("td",[t._v("拼写错误、漏掉分号、类型不匹配")])]),t._v(" "),a("tr",[a("td",[t._v("⚠️ 代码规范")]),t._v(" "),a("td",[t._v("命名不规范、缩进不统一、行过长")])]),t._v(" "),a("tr",[a("td",[t._v("🐛 潜在 bug")]),t._v(" "),a("td",[t._v("空指针、数组越界、死代码、未关闭资源")])]),t._v(" "),a("tr",[a("td",[t._v("🔐 安全漏洞")]),t._v(" "),a("td",[t._v("SQL 注入、XSS、路径遍历、硬编码密码")])]),t._v(" "),a("tr",[a("td",[t._v("🧊 性能问题")]),t._v(" "),a("td",[t._v("重复计算、不必要对象创建")])]),t._v(" "),a("tr",[a("td",[t._v("🔧 可维护性问题")]),t._v(" "),a("td",[t._v("高复杂度、过深嵌套、长方法、循环依赖")])]),t._v(" "),a("tr",[a("td",[t._v("🎯 设计层面")]),t._v(" "),a("td",[t._v("依赖反转、违反 SRP/OCP、代码坏味道（code smell）")])])])]),t._v(" "),a("p",[t._v("常见的静态分析工具")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("语言")]),t._v(" "),a("th",[t._v("工具")]),t._v(" "),a("th",[t._v("简介")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Java")]),t._v(" "),a("td",[t._v("✅ "),a("a",{attrs:{href:"https://www.sonarqube.org/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("SonarQube"),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("全面代码质量平台（支持 Web 展示）")])]),t._v(" "),a("tr",[a("td",[t._v("Java")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://spotbugs.github.io/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("SpotBugs（FindBugs）"),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("检查字节码，发现 bug 模式")])]),t._v(" "),a("tr",[a("td",[t._v("Java")]),t._v(" "),a("td",[t._v("PMD")]),t._v(" "),a("td",[t._v("检查代码规范、冗余代码")])]),t._v(" "),a("tr",[a("td",[t._v("Java")]),t._v(" "),a("td",[t._v("Checkstyle")]),t._v(" "),a("td",[t._v("检查命名、格式、注释规范等")])]),t._v(" "),a("tr",[a("td",[t._v("Python")]),t._v(" "),a("td",[t._v("pylint / flake8 / mypy")]),t._v(" "),a("td",[t._v("语法检查 + 类型检查")])]),t._v(" "),a("tr",[a("td",[t._v("JavaScript")]),t._v(" "),a("td",[t._v("ESLint")]),t._v(" "),a("td",[t._v("最广泛使用的前端代码静态分析")])]),t._v(" "),a("tr",[a("td",[t._v("C/C++")]),t._v(" "),a("td",[t._v("cppcheck / clang-tidy / Coverity")]),t._v(" "),a("td",[t._v("安全漏洞、内存错误分析")])]),t._v(" "),a("tr",[a("td",[t._v("多语言")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://semgrep.dev/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("Semgrep"),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("支持模式匹配式安全规则，可自定义")])]),t._v(" "),a("tr",[a("td",[t._v("多语言")]),t._v(" "),a("td",[t._v("CodeQL（GitHub）")]),t._v(" "),a("td",[t._v("类似 SQL 的代码查询语言，GitHub Actions 可集成")])])])]),t._v(" "),a("h3",{attrs:{id:"常见场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见场景"}},[t._v("#")]),t._v(" 常见场景")]),t._v(" "),a("p",[t._v("在 CI/CD 流程中进行代码审查，例如使用 GitHub、GitLab、Jenkins，将分析工具"),a("strong",[t._v("集成进你的代码提交或 PR 流程中")]),t._v("，让每次 push 都自动检查代码质量和安全性")]),t._v(" "),a("p",[t._v("安全扫描类库")]),t._v(" "),a("ul",[a("li",[t._v("SonarQube 安全规则集")]),t._v(" "),a("li",[t._v("Semgrep 安全规则库")]),t._v(" "),a("li",[t._v("CodeQL：GitHub 官方推荐，用于查找逻辑型安全问题（如访问控制缺失、注入漏洞）")])]),t._v(" "),a("p",[t._v("集成 SonarQube")]),t._v(" "),a("ul",[a("li",[t._v("在本地或 CI/CD 中部署 SonarQube Server")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("sonar-scanner")]),t._v(" 或 Maven 插件上传代码分析结果")]),t._v(" "),a("li",[t._v("可通过浏览器查看：bugs、code smells、安全漏洞、重复代码等")])]),t._v(" "),a("p",[t._v("或者在开发过程中使用插件进行代码检查")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("工具")]),t._v(" "),a("th",[t._v("集成方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Checkstyle")]),t._v(" "),a("td",[t._v("IDE 插件或 Maven 插件（自动 fail 构建）")])]),t._v(" "),a("tr",[a("td",[t._v("SpotBugs")]),t._v(" "),a("td",[t._v("Maven 插件 / Gradle 插件")])]),t._v(" "),a("tr",[a("td",[t._v("PMD")]),t._v(" "),a("td",[t._v("IDE 插件或"),a("code",[t._v("mvn pmd:check")])])])])]),t._v(" "),a("h3",{attrs:{id:"分析的底层逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析的底层逻辑"}},[t._v("#")]),t._v(" 分析的底层逻辑")]),t._v(" "),a("p",[t._v("静态分析的底层，其实就像编译器的前端（语法分析 ➜ 抽象语法树 ➜ 语义检查 ➜ 流程分析）")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("源代码\n  ↓\n词法分析（Lexer）\n  ↓\n语法分析（Parser）→ 抽象语法树 AST\n  ↓\n语义分析（类型推断、符号绑定）\n  ↓\n控制流分析（CFA）& 数据流分析（DFA）\n  ↓\n规则匹配（Lint）或模式匹配（如 Semgrep、CodeQL）\n  ↓\n输出警告 / 错误 / 报告\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("1️⃣ 词法分析（Lexical Analysis）")]),t._v(" "),a("p",[t._v("把源码分割成一串 token（关键词、标识符、括号、分号等），例如")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("会被分割成："),a("code",[t._v("int")]),t._v(", "),a("code",[t._v("x")]),t._v(", "),a("code",[t._v("=")]),t._v(", "),a("code",[t._v("5")]),t._v(", "),a("code",[t._v(";")])]),t._v(" "),a("p",[t._v("2️⃣ 语法分析（Syntax Analysis）")]),t._v(" "),a("ul",[a("li",[t._v("基于上下文无关文法（CFG），将 token 结构化成抽象语法树（AST）")]),t._v(" "),a("li",[t._v("AST 是“源代码的结构表示”，也是大部分静态分析的核心入口")])]),t._v(" "),a("p",[t._v("例如代码："),a("code",[t._v("if (x > 0) y = 1;")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IfStatement")]),t._v("\n ├─ "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n └─ "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Then")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AssignExpr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("工具如 ESLint、Checkstyle、PMD、SpotBugs 都会用 AST")]),t._v(" "),a("p",[t._v("3️⃣ 语义分析（Semantic Analysis）")]),t._v(" "),a("p",[t._v("检查变量类型、作用域、是否定义、调用合法性等，例如")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 y 没有定义，报错")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("4️⃣ 控制流分析（Control Flow Analysis, CFA）")]),t._v(" "),a("ul",[a("li",[t._v("构建控制流程图（CFG），分析条件/循环/分支/跳转")]),t._v(" "),a("li",[t._v("用来判断代码是否可达、分支覆盖是否完整等")])]),t._v(" "),a("p",[t._v("图示")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("[Start]\n   ↓\n[x > 0] ─Yes→ ["),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("]\n     └─No─→ [return]\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("5️⃣ 数据流分析（Data Flow Analysis, DFA）")]),t._v(" "),a("ul",[a("li",[t._v("分析变量的定义-使用链、是否初始化、是否为空等")]),t._v(" "),a("li",[t._v("举例：空指针分析、资源未关闭、变量未赋值就使用等，SpotBugs 等工具广泛应用")])]),t._v(" "),a("p",[t._v("6️⃣ 规则匹配 / 模式识别（Pattern Matching）")]),t._v(" "),a("ul",[a("li",[t._v("使用预定义或用户自定义的规则集来匹配代码结构")]),t._v(" "),a("li",[t._v("如 Checkstyle 会检查 "),a("code",[t._v("class 命名必须大写开头")]),t._v("，PMD 会匹配 "),a("code",[t._v("== null")]),t._v(" 的代码块")]),t._v(" "),a("li",[t._v("Semgrep/CodeQL 更强，它可以匹配结构+上下文")])]),t._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" detect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hardcoded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("password\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pattern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n      password = "..."')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("模式匹配 + AST 导航是现代分析工具（如 Semgrep、CodeQL）的重要特性")]),t._v(" "),a("h3",{attrs:{id:"更智能的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更智能的方法"}},[t._v("#")]),t._v(" 更智能的方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("符号执行（Symbolic Execution）")]),t._v(" "),a("td",[t._v("把变量当成符号而不是具体值进行逻辑推演，用于路径覆盖")])]),t._v(" "),a("tr",[a("td",[t._v("抽象解释（Abstract Interpretation）")]),t._v(" "),a("td",[t._v("对程序执行进行近似建模，保守地发现问题")])]),t._v(" "),a("tr",[a("td",[t._v("模型检测（Model Checking）")]),t._v(" "),a("td",[t._v("建模程序状态机，验证其是否满足规范（如死锁）")])]),t._v(" "),a("tr",[a("td",[t._v("人工智能辅助分析")]),t._v(" "),a("td",[t._v("结合语言模型，自动修复警告或生成规则（GitHub Copilot + CodeQL）")])])])]),t._v(" "),a("h2",{attrs:{id:"java-api-分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-api-分析"}},[t._v("#")]),t._v(" Java API 分析")]),t._v(" "),a("p",[t._v("考虑这样一个场景：对于一个完整的 Spring 项目，我需要按照接口，抽丝剥茧般把每个 API 的底层调用整理成一个完整的依赖链路，而后将这个链路包括相关的源码扔给大模型进行安全性分析")]),t._v(" "),a("p",[t._v("问题的关键在于：如何构建这条 API 调用的依赖路径以及整理整条路径上的相关代码")])])}),[],!1,null,null,null);a.default=e.exports}}]);